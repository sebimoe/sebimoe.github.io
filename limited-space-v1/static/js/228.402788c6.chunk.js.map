{"version":3,"file":"static/js/228.402788c6.chunk.js","mappings":"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","sources":["components/RoundCountdown.js","components/RoundController.js","components/PlayerInputDisplay.js","components/BanDisplay.js","components/ResultsDisplay.js","components/screens/Play.js"],"sourcesContent":["import { useEffect, useMemo, useRef } from 'react';\nimport sounds from '../assets/sounds/index'\nimport useSound from 'use-sound';\n\nimport './RoundCountdown.css'\nimport { useSelector } from 'react-redux';\nimport { adjustVolume } from '../helpers/volume';\n\nfunction RoundCountdown({ countdownStart = 3 }) {\n  const sfxVolume = adjustVolume(useSelector((state) => state.game.sfxVolume));\n\n  const opts = {\n    volume: sfxVolume,\n    interrupt: true,\n  }\n  const roundPhase = useSelector((state) => state.round.roundPhase);\n  const phaseSecondsLeft = useSelector((state) => state.round.phaseSecondsLeft);\n  const finalText = roundPhase === 'ongoing' ? 'Finish!' : 'Go!';\n\n  const [ countdownSound1 ] = useSound(sounds.countdownSound1Src, opts);\n  const [ countdownSound2 ] = useSound(sounds.countdownSound2Src, opts);\n  const [ gameEndBlip ] = useSound(sounds.gameEndBlipSrc, opts);\n\n  \n  const lastTimePlayed = useRef(null);\n\n  useEffect(() => {\n    if(lastTimePlayed.current === phaseSecondsLeft) return;\n    lastTimePlayed.current = phaseSecondsLeft;\n    if(phaseSecondsLeft !== null && phaseSecondsLeft <= countdownStart) {\n      if(phaseSecondsLeft > 0) {\n        countdownSound1();\n      }else{\n        if(roundPhase === \"ongoing\") {\n          gameEndBlip();\n        }else{\n          countdownSound2();\n        }\n      }\n    }\n  }, [lastTimePlayed, phaseSecondsLeft, countdownStart, countdownSound1, countdownSound2])\n\n  const text = useMemo(() => {\n    if(phaseSecondsLeft !== null && phaseSecondsLeft <= countdownStart) {\n      return (phaseSecondsLeft > 0 || !finalText) ? phaseSecondsLeft : finalText;\n    }\n    return null;\n  }, [phaseSecondsLeft, countdownStart, finalText])\n\n  return <div className='round-countdown'>\n    { text && <div className=\"round-countdown__number\">\n      <span key={phaseSecondsLeft}>{text}</span>\n    </div>}\n  </div>;\n}\n\n// class RoundCountdown extends Component {\n//   render() {\n//     let { countdownStart = 3 } = this.props;\n//     const { phaseSecondsLeft } = this.context;\n\n//     return <RoundCountdownDisplay\n//       countdownStart={countdownStart}\n//       phaseSecondsLeft={phaseSecondsLeft}\n//     ></RoundCountdownDisplay>\n//   }\n// }\n// RoundCountdown.contextType = RoundTimerContext;\n\n\nexport default RoundCountdown;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setRoundPhase, updatePhaseSecondsLeft } from '../reducers/actions/round';\n\nfunction RoundController() {\n  const dispatch = useDispatch();\n  const roundPhase = useSelector((state) => state.round.roundPhase);\n  const started = useSelector((state) => state.round.started);\n  const phaseSecondsLeft = useSelector((state) => state.round.phaseSecondsLeft);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      dispatch(updatePhaseSecondsLeft());\n    }, 200);\n    return () => clearInterval(id);\n  }, [dispatch]);\n\n  useEffect(() => {\n    if(roundPhase === 'prep' && started && phaseSecondsLeft === null) {\n      dispatch(setRoundPhase('ongoing'));\n    }else if(roundPhase === 'ongoing' && phaseSecondsLeft === null) {\n      dispatch(setRoundPhase('results'))\n    }\n  }, [roundPhase, started, phaseSecondsLeft, dispatch])\n\n  return null;\n}\n\nexport default RoundController;\n","import './PlayerInputDisplay.css'\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function PlayerInputDisplay({ input }) {\r\n  const roundPhase = useSelector((state) => state.round.roundPhase);\r\n\r\n  return <div className={`player-input ${roundPhase === 'results' ? 'checked' : ''}`}>\r\n    {input.map((word, i) =>\r\n      <>\r\n        <span key={i} \r\n          className={`word ${word.mistake ? 'mistake' : ''} ${word.banned ? 'banned' : ''} ${word.valid ? 'valid' : ''} ${word.dupe ? 'dupe' : ''}`}\r\n        >{word.content}</span>\r\n        { i !== input.length - 1 ? <span className=\"space\"> </span> : null}\r\n      </>\r\n    )}\r\n  </div>;\r\n}\r\n","import './BanDisplay.css'\n\nexport default function BanDisplay({ bans }) {\n\n  return <h3 title=\"Two consonants are randomly banned each round\" className=\"ban-display\">\n    <span key=\"top\" className=\"ban-display__description\">Words containing </span>\n    {bans.map((letter, i) =>\n      <><span key={`${i}-${letter}`} className=\"ban-display__ban\">{letter}</span>{ i !== bans.length - 1 ? (i !== bans.length - 2 ? ', ' : ' and ') : '' }</>\n    )}\n    <span key=\"bottom\" className=\"ban-display__description\"> are <b>banned</b>!</span>\n  </h3>;\n}\n","import './ResultsDisplay.css'\r\n\r\nconst titles = {\r\n  dupes: 'Duplicate Words',\r\n  banned: 'Banned Words',\r\n  mistakes: 'Incorrect Words',\r\n  spaces: 'Spaces Used',\r\n  words: 'Valid Words',\r\n  letters: 'Typed Letters',\r\n};\r\n\r\nconst hints = {\r\n  dupes: 'Repeated words',\r\n  banned: 'Words containing banned letters',\r\n  mistakes: 'Words not matching English dictionary',\r\n  spaces: 'Number of spaces used',\r\n  words: 'Correct words',\r\n  letters: 'Number of letters in valid words',\r\n};\r\n\r\nconst points = {\r\n  dupes: -100,\r\n  banned: -50,\r\n  mistakes: -30,\r\n  spaces: -20,\r\n  words: 10,\r\n  letters: 5,\r\n};\r\n\r\nexport default function ResultsDisplay({ results }) {\r\n\r\n  const items = [ 'letters', 'words', 'spaces', 'mistakes', 'banned', 'dupes' ].map(key => [\r\n    titles[key], results[key], results[key] * points[key], hints[key]\r\n  ]);\r\n\r\n  return <p className=\"results-display\">\r\n    {items.map(([title, result, points, hint], i) =>\r\n      <>\r\n        <span key={i*3} className=\"results-display__title\" title={hint}>{title}</span>\r\n        <span key={i*3+1} className=\"results-display__result\">{result}</span>\r\n        <span key={i*3+2} className=\"results-display__points\">{points}</span>\r\n      </>\r\n    )}\r\n    <span className=\"results-display__title results-display--total\">Total</span>\r\n    <span className=\"results-display__result results-display--total\"></span>\r\n    <span className=\"results-display__points results-display--total\">{items.reduce((a, b) => a + b[2], 0)}</span>\r\n  </p>;\r\n}\r\n","import { useCallback, useEffect } from \"react\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { scheduleScreenChange } from \"../../reducers/actions/game\";\nimport TitledLayout from \"../TitledLayout\";\nimport logoSrc from \"../../assets/logo_1line.png\"\nimport LargeButton from \"../LargeButton\";\nimport RoundCountdown from \"../RoundCountdown\";\nimport RoundController from \"../RoundController\";\nimport { addLocalPlayerInput, setRoundPhase, setupRound } from \"../../reducers/actions/round\";\nimport PlayerInputDisplay from \"../PlayerInputDisplay\";\nimport BanDisplay from \"../BanDisplay\";\nimport ResultsDisplay from \"../ResultsDisplay\";\nimport { adjustVolume } from \"../../helpers/volume\";\nimport useSound from \"use-sound\";\nimport sounds from \"../../assets/sounds\";\n\nfunction getBans() {\n  const pool = [...'BCDFGHJKLMNPQRSTVXZW'];\n  const bans = [];\n  for(let i = 0; i < 2; i++) {\n    const picked = Math.floor(Math.random() * pool.length);\n    bans.push(pool[picked]);\n    pool.splice(picked, 1);\n  }\n  return bans;\n}\n\nexport default function Play() {\n  const dispatch = useDispatch();\n  const roundPhase = useSelector((state) => state.round.roundPhase);\n  const phaseSecondsLeft = useSelector((state) => state.round.phaseSecondsLeft);\n  const localPlayerInput = useSelector((state) => state.round.localPlayerInput);\n  const bans = useSelector((state) => state.round.bans);\n  const results = useSelector((state) => state.round.results);\n\n  \n  const sfxVolume = adjustVolume(useSelector((state) => state.game.sfxVolume));\n  const opts = {\n    volume: sfxVolume,\n    interrupt: true,\n  }\n  const [ typing1 ] = useSound(sounds.typing1, opts);\n  const [ typing2 ] = useSound(sounds.typing2, opts);\n  const [ typing3 ] = useSound(sounds.typing3, opts);\n  const [ typingSpace ] = useSound(sounds.typingSpace, opts);\n\n\n  const gotoMenu = useCallback(() => {\n    dispatch(scheduleScreenChange('menu'));\n  }, [dispatch]);\n  \n  const playAgain = useCallback(() => {\n    dispatch(setupRound({\n      bans: getBans(),\n      ongoingPhaseDuration: 20,\n    }));\n    dispatch(setRoundPhase('prep'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    const pressHandler = ({ key }) => {\n      if(roundPhase !== 'ongoing') return;\n      const char = key.toUpperCase();\n      if(/^[A-Z ]$/.test(char)) {\n        dispatch(addLocalPlayerInput(char));\n        if(char === ' ') {\n          typingSpace();\n        }else{\n          [ typing1, typing2, typing3 ][ ~~(Math.random() * 3) ]();\n        }\n      }\n    };\n    document.addEventListener('keydown', pressHandler, { passive: true });\n    return () => document.removeEventListener('keydown', pressHandler);\n  }, [dispatch, roundPhase, typing1, typing2, typing3, typingSpace]);\n\n  useEffect(() => {\n    dispatch(setupRound({\n      bans: getBans(),\n      ongoingPhaseDuration: 20,\n    }));\n    dispatch(setRoundPhase('prep'));\n  }, [dispatch]);\n\n  return <TitledLayout className=\"play-screen\" title={<img className=\"logo logo--small\" src={logoSrc} alt=\"Limited Space game logo\"></img>}>\n    <RoundCountdown  />\n    <RoundController />\n\n    <h3 style={{marginBottom: 0}}>Type as many english words as you can using the least amount of spaces (the longer the word the better).</h3>\n    <BanDisplay bans={bans} />\n    {(roundPhase === \"ongoing\") && \n      <h1>Time left: {phaseSecondsLeft} seconds.</h1>\n    }\n    \n    <div className=\"play-area\" style={{marginBottom: '4rem', maxWidth: '80vw'}}>\n      { (localPlayerInput.length === 1 && !localPlayerInput[0].content.length) \n        ? \"\"\n        : <PlayerInputDisplay input={localPlayerInput} />\n      }\n    </div>\n    { roundPhase === \"results\" ? <ResultsDisplay results={results} /> : null }\n    <div className=\"main-menu-buttons\" style={{marginTop: '4rem'}}>\n      <LargeButton onClick={playAgain}>{ roundPhase === \"results\" ? \"Play Again\" : \"Restart\" }</LargeButton>\n      <LargeButton onClick={gotoMenu}>{ roundPhase === \"results\" ? \"Back to Menu\" : \"Give Up\" }</LargeButton>\n    </div>\n  </TitledLayout>;\n}\n"],"names":["_ref","_ref$countdownStart","countdownStart","opts","volume","adjustVolume","useSelector","state","game","sfxVolume","interrupt","roundPhase","round","phaseSecondsLeft","finalText","_useSound","useSound","sounds","countdownSound1Src","countdownSound1","_slicedToArray","_useSound3","countdownSound2Src","countdownSound2","_useSound5","gameEndBlipSrc","gameEndBlip","lastTimePlayed","useRef","useEffect","current","text","useMemo","_jsx","className","children","dispatch","useDispatch","started","id","setInterval","updatePhaseSecondsLeft","clearInterval","setRoundPhase","PlayerInputDisplay","input","concat","map","word","i","_jsxs","_Fragment","mistake","banned","valid","dupe","content","length","BanDisplay","bans","title","letter","titles","dupes","mistakes","spaces","words","letters","hints","points","ResultsDisplay","results","items","key","_ref2","_ref3","result","hint","reduce","a","b","getBans","pool","_toConsumableArray","picked","Math","floor","random","push","splice","Play","localPlayerInput","typing1","typing2","typing3","_useSound7","typingSpace","gotoMenu","useCallback","scheduleScreenChange","playAgain","setupRound","ongoingPhaseDuration","pressHandler","char","toUpperCase","test","addLocalPlayerInput","document","addEventListener","passive","removeEventListener","TitledLayout","src","logoSrc","alt","RoundCountdown","RoundController","style","marginBottom","maxWidth","marginTop","LargeButton","onClick"],"sourceRoot":""}